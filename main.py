import os
import json
import logging
import asyncpg
import asyncio
import discord
import redis.asyncio as redis
from discord.ext import commands
import openai
import time
import httpx
import random
import requests
from dotenv import load_dotenv

# ‡πÇ‡∏´‡∏•‡∏î environment variables
load_dotenv()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
logger = logging.getLogger('discord_bot')

# ‡πÇ‡∏´‡∏•‡∏î API Key ‡πÅ‡∏•‡∏∞ Token
TOKEN = os.getenv("DISCORD_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")
PG_USER = os.getenv('PGUSER')
PG_PW = os.getenv('PGPASSWORD')
PG_HOST = os.getenv('PGHOST')
PG_PORT = os.getenv('PGPORT', '5432')
PG_DB = os.getenv('PGDATABASE')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
GOOGLE_CSE_ID = os.getenv('GOOGLE_CSE_ID')
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost')

CHANNEL_ID = 1350812185001066538  # ‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
LOG_CHANNEL_ID = 1350924995030679644  # ‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á logs

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Discord Bot
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="$", intents=intents)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OpenAI
openai.api_key = OPENAI_API_KEY

# ‡πÉ‡∏ä‡πâ OpenAI client ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
openai_client = openai.OpenAI(api_key=OPENAI_API_KEY)

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Redis
redis_instance = None

async def setup_redis():
    global redis_instance
    try:
        redis_instance = await redis.from_url(REDIS_URL, decode_responses=True)
        await redis_instance.ping()
        logger.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Redis ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Redis: {e}")
        redis_instance = None

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ PostgreSQL
async def setup_postgres():
    if DATABASE_URL:
        logger.info(f"üîç DATABASE_URL: {'‚úÖ ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤' if DATABASE_URL else '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤'}")
    else:
        logger.info(f"üîç PGHOST: {PG_HOST}")
        logger.info(f"üîç PGUSER: {PG_USER}")
        logger.info(f"üîç PGDATABASE: {PG_DB}")
        logger.info(f"üîç PGPASSWORD: {'‚úÖ ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤' if PG_PW else '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤'}")
        logger.info(f"üîç PGPORT: {PG_PORT}")

    if not DATABASE_URL and not all([PG_USER, PG_PW, PG_HOST, PG_DB, PG_PORT]):
        logger.error("‚ùå PostgreSQL environment variables ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
        return

    try:
        if DATABASE_URL:
            bot.pool = await asyncpg.create_pool(DATABASE_URL, max_size=10, max_inactive_connection_lifetime=15)
        else:
            bot.pool = await asyncpg.create_pool(
                user=PG_USER,
                password=PG_PW,
                host=PG_HOST,
                port=PG_PORT,
                database=PG_DB,
                max_size=10,
                max_inactive_connection_lifetime=15
            )
        logger.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ PostgreSQL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ PostgreSQL: {e}")
        bot.pool = None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI
#     try:
            response = openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
                max_tokens=1500,
                temperature=0.8,
                top_p=1.0,
                frequency_penalty=0.3,
                presence_penalty=0.4
            )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        logger.error(f"OpenAI API Error: {e}")
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"

async def check_openai_quota_and_handle_errors():
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô OpenAI API ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î """
    try:
        response = openai_client.models.list()
        logger.info("OpenAI API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        return True
    except httpx.HTTPStatusError as e:
        if e.response.status_code == 429:
            logger.error("‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Ç‡∏≠‡∏á OpenAI ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
            await send_message_to_channel(LOG_CHANNEL_ID, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏°‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OpenAI API")
        elif e.response.status_code == 403:
            logger.error("API Key ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå")
            await send_message_to_channel(LOG_CHANNEL_ID, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ API Key ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå")
        else:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ OpenAI API: {e}")
        return False

async def get_openai_response(messages, max_retries=3, delay=5):
    """ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å OpenAI API ‡∏û‡∏£‡πâ‡∏≠‡∏° retry ‡∏´‡∏≤‡∏Å‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î 429 """
    if not await check_openai_quota_and_handle_errors():
        return None

    for attempt in range(max_retries):
        try:
            response = openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
                max_tokens=1500,
                temperature=0.8,
                top_p=1.0,
                frequency_penalty=0.3,
                presence_penalty=0.4
            )
            if not response or not response.choices:
                logger.error("OpenAI API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á")
                return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"
            return response.choices[0].message.content.strip()
        except httpx.HTTPStatusError as e:
            if e.response.status_code == 429:
                wait_time = delay * (attempt + 1)
                logger.warning(f'‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î 429 Too Many Requests, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠ {wait_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...')
                await asyncio.sleep(wait_time)
            else:
                await check_openai_quota_and_handle_errors()
                break
    logger.error("‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô retry ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OpenAI API")
    return None

# ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google
def search_google(query):
    try:
        url = f"https://www.googleapis.com/customsearch/v1?q={query}&key={GOOGLE_API_KEY}&cx={GOOGLE_CSE_ID}"
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        results = response.json().get("items", [])
        if results:
            summaries = []
            for result in results[:3]:  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
                title = result.get("title", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠")
                snippet = result.get("snippet", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ")
                link = result.get("link", "#")
                summaries.append(f"üîπ **{title}**\n{snippet}\nüîó {link}")
            return "\n\n".join(summaries)
    except requests.exceptions.RequestException as e:
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Google Search API: {e}")
    return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ä‡∏ó
async def store_chat(user_id, message):
    await redis_instance.set(f"chat:{user_id}", json.dumps(message), ex=86400)

# ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó‡∏à‡∏≤‡∏Å Redis
async def get_chat_history(user_id):
    data = await redis_instance.get(f"chat:{user_id}")
    return json.loads(data) if data else []

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
async def process_message(user_id, text):
    previous_chats = await get_chat_history(user_id)
    faq_response = await get_faq_response(text, previous_chats)
    if faq_response:
        return faq_response
    
    tone = detect_tone(text)
    system_prompt = "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó"
    if (tone == "casual"):
        system_prompt = "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô"
    elif (tone == "formal"):
        system_prompt = "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î‡∏™‡∏∏‡∏†‡∏≤‡∏û"
    
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": text}
        ],
        max_tokens=1500,
        temperature=0.8,
        top_p=1.0,
        frequency_penalty=0.3,
        presence_penalty=0.4
    )
        reply_content = response.choices[0].message.content.strip()
        await store_chat(user_id, {"question": text, "response": reply_content})
        return reply_content
    except Exception as e:
        logger.error(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ OpenAI API: {e}')
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"

# Slash Command: Ping
@bot.tree.command(name="ping", description="‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏≠‡∏¢‡∏π‡πà")
async def ping(interaction: discord.Interaction):
    await interaction.response.send_message(f"Pong! üèì Latency: {round(bot.latency * 1000)}ms")

# Slash Command: Shutdown (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á)
@bot.tree.command(name="shutdown", description="‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á)")
@commands.is_owner()
async def shutdown(interaction: discord.Interaction):
    await interaction.response.send_message("üõë ‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß...")
    await bot.close()

# Slash Command: Google Search
@bot.tree.command(name="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", description="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google")
async def search(interaction: discord.Interaction, query: str):
    search_results = search_google(query)
    if search_results == "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google":
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
    else:
        await interaction.response.send_message(f"üîç **‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å Google:**\n{search_results}")

        summary = summarize_with_gpt(search_results)
        await interaction.followup.send(f"üìù **‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢ AI:**\n{summary}")

async def create_table():
    """ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á context ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ """
    try:
        async with bot.pool.acquire() as con:
            await con.execute("""
                CREATE TABLE IF NOT EXISTS context (
                    id BIGINT PRIMARY KEY,
                    chatcontext TEXT[] DEFAULT ARRAY[]::TEXT[]
                )
            """)
            logger.info("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á context ‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        logger.error(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á: {e}')

@bot.event
async def on_ready():
    global redis_instance
    try:
        logging.info(f"üöÄ ‡∏ö‡∏≠‡∏ó {bot.user} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        await bot.tree.sync()
        logger.info("‚úÖ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå Slash Commands ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

        logger.info("üöÄ ‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô on_ready()...")
        await setup_postgres()
        await setup_redis()
        if bot.pool is None:
            logger.error("‚ùå PostgreSQL connection pool ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤")
        if redis_instance is None:
            logger.error("‚ùå Redis instance ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤")
        logger.info(f"‚úÖ {bot.user} ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô on_ready: {e}")
        bot.pool = None
        redis_instance = None

async def send_message_to_channel(channel_id, message):
    """ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á Discord """
    try:
        channel = bot.get_channel(channel_id)
        if channel:
            await channel.send(message)
    except Exception as e:
        logger.error(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á: {e}')

async def get_guild_x(guild, x):
    if not hasattr(bot, "pool") or bot.pool is None:
        logger.warning("‚ö†Ô∏è Database ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        return None
    try:
        async with bot.pool.acquire() as con:
            return await con.fetchval(f"""
                SELECT COALESCE({x}, ARRAY[]::TEXT[]) 
                FROM context WHERE id = $1
            """, guild)
    except Exception as e:
        logger.error(f'get_guild_x: {e}')
        return None

async def chatcontext_append(guild, message):
    if not hasattr(bot, "pool") or bot.pool is None:
        logger.warning("‚ö†Ô∏è Database ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        return
    try:
        async with bot.pool.acquire() as con:
            await con.execute("""
                INSERT INTO context (id, chatcontext)
                VALUES ($1, ARRAY[$2]::TEXT[])
                ON CONFLICT (id) DO UPDATE 
                SET chatcontext = array_append(
                    COALESCE(context.chatcontext, ARRAY[]::TEXT[]),  
                    $2
                )
            """, guild, message)
    except Exception as e:
        logger.error(f'chatcontext_append: {e}')

async def get_faq_response(new_question, previous_questions):
    for question in previous_questions:
        if new_question.lower() in question['question'].lower():
            return question['response']
    return None

def detect_tone(text):
    casual_words = ["555", "‡∏Æ‡∏≤", "‡πÇ‡∏Ñ‡∏ï‡∏£", "‡πÄ‡∏ß‡πâ‡∏¢", "‡πÄ‡∏´‡πâ‡∏¢"]
    formal_words = ["‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤", "‡∏Ç‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°"]
    if any(word in text for word in casual_words):
        return "casual"
    elif any(word in text for word in formal_words):
        return "formal"
    return "neutral"

async def send_long_message(channel, content):
    for chunk in [content[i:i+2000] for i in range(0, len(content), 2000)]:
        await channel.send(chunk)

@bot.event
async def on_message(message: discord.Message):
    if message.author == bot.user or message.channel.id != CHANNEL_ID:
        return
    
    try:
        text = message.content.lower()
        chatcontext = await get_guild_x(message.guild.id, "chatcontext") or []
        
        if text.startswith("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:"):
            query = text.replace("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", "").strip()
            search_results = search_google(query)

            if search_results == "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google":
                await message.channel.send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
            else:
                await message.channel.send(f"üîç **‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å Google:**\n{search_results}")

                summary = summarize_with_gpt(search_results)
                await message.channel.send(f"üìù **‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢ AI:**\n{summary}")
        
        else:
            messages = [{"role": "system", "content": (
                "‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏° ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏û‡∏π‡∏î‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡πÑ‡∏°‡πà‡∏û‡∏π‡∏î‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£ ‡πÑ‡∏°‡πà‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå ‡πÑ‡∏°‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û‡∏à‡πã‡∏≤ "
                "‡∏û‡∏π‡∏î‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏á‡πÜ ‡∏´‡∏¢‡∏≤‡∏ö‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏±‡∏ô‡∏û‡∏≠‡∏î‡∏µ ‡πÄ‡∏ä‡πà‡∏ô '‡πÄ‡∏ß‡πâ‡∏¢', '‡∏ß‡∏∞', '‡πÇ‡∏Ñ‡∏ï‡∏£', '‡πÅ‡∏°‡πà‡∏á', '‡∏™‡∏±‡∏™' ‡∏Ø‡∏•‡∏Ø "
                "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏°‡∏µ‡∏° ‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡πá‡∏ï ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡πÅ‡∏≠‡πä‡∏ö ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≠‡∏Å‡πÜ "
                "‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡πÄ‡∏ü‡∏Ñ ‡πÑ‡∏°‡πà‡∏û‡∏π‡∏î‡∏™‡∏ß‡∏¢‡∏´‡∏£‡∏π ‡∏ñ‡πâ‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡πÅ‡∏°‡πà‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Ñ‡∏Å‡πá‡∏û‡∏π‡∏î‡∏ï‡∏£‡∏á‡πÜ ‡πÑ‡∏õ‡πÄ‡∏•‡∏¢ "
                "‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏±‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏•‡∏Å‡∏ù‡∏∑‡∏î‡πÅ‡∏ö‡∏ö‡∏ö‡∏≠‡∏ó ‡∏≠‡∏¢‡πà‡∏≤‡∏à‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ä‡∏ß‡∏ô‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏ö‡∏ö‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå "
                "‡πÄ‡∏ä‡πà‡∏ô '‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå' ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏°‡πà‡∏á‡πÑ‡∏°‡πà‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ "
                "‡∏û‡∏π‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ô‡πÑ‡∏ó‡∏¢‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏Å‡πá‡∏û‡∏≠ "
                "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ö‡πà‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏á‡∏≤‡∏ô ‡∏≠‡∏≤‡∏à‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ '‡πÅ‡∏°‡πà‡∏á ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏™‡∏±‡∏î ‡πÅ‡∏ï‡πà‡πÄ‡∏≠‡∏≤‡πÄ‡∏´‡∏≠‡∏∞ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏°‡∏±‡∏ô‡∏Å‡πá‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÄ‡∏ß‡πâ‡∏¢' "
                "‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÄ‡∏≠‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏î‡∏µ ‡∏≠‡∏≤‡∏à‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ '‡∏ñ‡πâ‡∏≤‡∏Å‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∂‡∏á‡∏ô‡∏∞ ‡∏Å‡∏π‡∏Å‡πá‡∏à‡∏∞...' "
            )}]
            for msg in chatcontext[-6:]:
                try:
                    name, content = msg.split(":", 1)
                    role = "assistant" if name.strip().lower() == "bot" else "user"
                    messages.append({"role": role, "content": content.strip()})
                except ValueError:
                    continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° format ‡∏û‡∏±‡∏á
            messages.append({"role": "user", "content": text})
            
            reply_content = await get_openai_response(messages)

            if reply_content:
                logger.debug(f'OpenAI Response: {reply_content}')
                
                if reply_content:
                    await send_long_message(message.channel, reply_content)
                    await chatcontext_append(message.guild.id, f'{message.author.display_name}: {text}')
                    await chatcontext_append(message.guild.id, f'bot: {reply_content}')
            else:
                await message.reply("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏°‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OpenAI API")
    except Exception as e:
        logger.error(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô on_message: {e}')
        
        error_messages = [
            "‡πÅ‡∏°‡πà‡∏á‡∏á‡∏á ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏°‡∏ß‡πà‡∏∞",
            "‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≠‡∏Å... ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤! üõ†Ô∏è",
            "‡πÉ‡∏Ñ‡∏£‡πÑ‡∏õ‡πÅ‡∏ï‡∏∞‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡∏ü‡∏£‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡πâ‡∏á‡πÄ‡∏•‡∏¢‡πÄ‡∏ô‡∏µ‡πà‡∏¢! ‚ö°",
            "‡∏≠‡πâ‡∏≤‡∏ß ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏° ‡∏ú‡∏°‡πÅ‡∏Ñ‡πà‡∏ö‡∏≠‡∏ó! ü§ñ",
            "‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏õ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤!",
            "‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏û‡∏±‡∏á ‡πÅ‡∏ï‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà ‡πÜ ‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö!",
            "‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô ‡πÜ ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏≤‡πÅ‡∏õ‡πä‡∏ö!",
            "‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏Å‡πÉ‡∏à ‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°‡πÅ‡∏Ñ‡πà‡πÅ‡∏Æ‡∏á‡∏Ñ‡πå ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤!"
        ]

        await message.channel.send(random.choice(error_messages))

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó
async def main():
    async with bot:
        await setup_postgres()
        await setup_redis()
        await bot.start(TOKEN)

asyncio.run(main())
