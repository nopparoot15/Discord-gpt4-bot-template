import os
import json
import logging
import asyncpg
import asyncio
import discord
from discord.ext import commands
import openai
import time
import httpx
import random
import requests

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)s:%(message)s', handlers=[
    logging.FileHandler("bot.log"),
    logging.StreamHandler()
])
logger = logging.getLogger('discord_bot')

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡πÅ‡∏•‡∏∞ Token
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
TOKEN = os.getenv('DISCORD_TOKEN')
PG_USER = os.getenv('PGUSER')
PG_PW = os.getenv('PGPASSWORD')
PG_HOST = os.getenv('PGHOST')
PG_PORT = os.getenv('PGPORT')
PG_DB = os.getenv('PGPDATABASE')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
GOOGLE_CSE_ID = os.getenv('GOOGLE_CSE_ID')

CHANNEL_ID = 1350812185001066538  # ‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
LOG_CHANNEL_ID = 1350924995030679644  # ‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á logs

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OpenAI client
client = openai.OpenAI(api_key=OPENAI_API_KEY)

intents = discord.Intents.default()
intents.message_content = True  # ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
bot = commands.Bot(command_prefix='$', intents=intents)

async def check_openai_quota_and_handle_errors():
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô OpenAI API ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î """
    try:
        response = client.models.list()
        logger.info("OpenAI API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        return True
    except openai.error.OpenAIError as e:
        if isinstance(e, openai.error.RateLimitError):
            logger.error("‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Ç‡∏≠‡∏á OpenAI ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
            await send_message_to_channel(LOG_CHANNEL_ID, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏°‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OpenAI API")
        elif isinstance(e, openai.error.AuthenticationError):
            logger.error("API Key ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå")
            await send_message_to_channel(LOG_CHANNEL_ID, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ API Key ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå")
        else:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ OpenAI API: {e}")
        return False

async def send_message_to_channel(channel_id, message):
    """ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á Discord """
    try:
        channel = bot.get_channel(channel_id)
        if channel:
            await channel.send(message)
    except Exception as e:
        logger.error(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á: {e}')

async def create_table():
    """ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á context ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ """
    try:
        async with bot.pool.acquire() as con:
            await con.execute("""
                CREATE TABLE IF NOT EXISTS context (
                    id BIGINT PRIMARY KEY,
                    chatcontext TEXT[] DEFAULT ARRAY[]::TEXT[],
                    search_results JSONB DEFAULT '[]'
                )
            """)
            logger.info("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á context ‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        logger.error(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á: {e}')

@bot.event
async def on_ready():
    try:
        bot.pool = await asyncpg.create_pool(user=PG_USER, password=PG_PW, host=PG_HOST, port=PG_PORT, database=PG_DB, max_size=10, max_inactive_connection_lifetime=15)
        await create_table()
        logger.info(f'{bot.user} ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
    except Exception as e:
        logger.error(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô on_ready: {e}')
        bot.pool = None

async def get_openai_response(messages, max_retries=3, delay=5):
    """ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å OpenAI API ‡∏û‡∏£‡πâ‡∏≠‡∏° retry ‡∏´‡∏≤‡∏Å‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î 429 """
    if not await check_openai_quota_and_handle_errors():
        return None
    
    for attempt in range(max_retries):
        try:
            response = await client.chat.completions.create(
                model="gpt-4",
                messages=messages,
                max_tokens=2000,
                temperature=1
            )
            return response
        except openai.error.OpenAIError as e:
            if isinstance(e, openai.error.RateLimitError):
                wait_time = delay * (attempt + 1)
                logger.warning(f'‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î 429 Too Many Requests, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠ {wait_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...')
                await asyncio.sleep(wait_time)
            else:
                await check_openai_quota_and_handle_errors()
                break
    logger.error("‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô retry ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OpenAI API")
    return None

async def get_guild_x(guild, x):
    if bot.pool is None or not hasattr(bot, 'pool'):
        return None
    try:
        async with bot.pool.acquire() as con:
            return await con.fetchval(f"SELECT COALESCE({x}, ARRAY[]::TEXT[]) FROM context WHERE id = $1", guild)
    except Exception as e:
        logger.error(f'get_guild_x: {e}')
        return None

async def chatcontext_append(guild, message):
    if bot.pool is None or not hasattr(bot, 'pool'):
        return
    try:
        async with bot.pool.acquire() as con:
            await con.execute("""
                INSERT INTO context (id, chatcontext)
                VALUES ($1, ARRAY[$2]::TEXT[])
                ON CONFLICT (id) DO UPDATE SET chatcontext = array_append(COALESCE(context.chatcontext, ARRAY[]::TEXT[]), $2)
            """, guild, message.replace("'", "''"))
    except Exception as e:
        logger.error(f'chatcontext_append: {e}')

async def save_search_results(guild, results):
    if bot.pool is None or not hasattr(bot, 'pool'):
        return
    try:
        async with bot.pool.acquire() as con:
            await con.execute("""
                UPDATE context
                SET search_results = array_append(COALESCE(search_results, '[]'::JSONB), $2::JSONB)
                WHERE id = $1
            """, guild, json.dumps(results))
    except Exception as e:
        logger.error(f'save_search_results: {e}')

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Search
def search_google(query):
    url = f"https://www.googleapis.com/customsearch/v1?q={query}&key={GOOGLE_API_KEY}&cx={GOOGLE_CSE_ID}"
    response = requests.get(url)
    if response.status_code == 200:
        results = response.json().get("items", [])
        if results:
            summaries = []
            for result in results[:3]:  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
                title = result.get("title", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠")
                snippet = result.get("snippet", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ")
                link = result.get("link", "#")
                summaries.append(f"üîπ **{title}**\n{snippet}\nüîó {link}")
            return summaries
    return []

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ GPT ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def summarize_with_gpt(text):
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ"},
            {"role": "user", "content": f"‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢:\n{text}"}
        ]
    )
    return response.choices[0].message.content

@bot.event
async def on_message(message: discord.Message):
    if message.author == bot.user or message.channel.id != CHANNEL_ID:
        return
    
    try:
        text = message.content.lower()
        chatcontext = await get_guild_x(message.guild.id, "chatcontext") or []
        
        # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google
        if text.startswith("!search "):
            query = text.replace("!search ", "").strip()
            search_results = search_google(query)

            if not search_results:
                await message.channel.send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
            else:
                await message.channel.send(f"üîç **‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å Google:**\n" + "\n\n".join(search_results))

                # ‡πÉ‡∏´‡πâ GPT-4 ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                summary = summarize_with_gpt("\n".join(search_results))
                await message.channel.send(f"üìù **‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢ AI:**\n{summary}")
                await save_search_results(message.guild.id, search_results)
        
        # ‡∏ñ‡∏≤‡∏° AI ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
        else:
            messages = [{"role": "system", "content": (
                "‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏° ‡πÄ‡∏û‡∏®‡πÄ‡∏Å ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ "
                "‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô Gen Z ‡πÅ‡∏•‡∏∞‡∏ä‡∏≠‡∏ö‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏°‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï (‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°) "
                "‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏£‡∏∞ "
                "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏°‡∏∏‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏Å‡∏µ‡∏ö‡∏¥‡∏î‡∏µ‡πâ ‡∏ô‡∏Å‡∏Ñ‡∏∏‡∏°‡∏´‡∏•‡∏µ ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏ã‡∏¥‡∏Å‡∏°‡πà‡∏≤, ‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏î‡∏≤‡∏¢ "
                "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡πÅ‡∏°‡πà‡∏á‡∏á‡∏á' (‡∏•‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á) ‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° "
                "‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡πÅ‡∏°‡πà‡∏á‡∏á‡∏á' ‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡∏û‡∏π‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå "
                "‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏±‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÇ‡∏î‡∏¢‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô 2000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ "
                "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô "
                "‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏°‡∏∏‡∏Å‡∏ï‡∏•‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏µ‡∏°‡∏à‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° "
                "‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏∏‡∏¢‡∏î‡πâ‡∏ß‡∏¢ "
            )}]
            messages.extend({"role": "user" if 'bot' not in msg.lower() else "assistant", "content": msg.split(":", 1)[1]} for msg in chatcontext[-6:])
            messages.append({"role": "user", "content": text})
            
            response = None
            try:
                response = await get_openai_response(messages)
            except HTTPStatusError as e:
                if e.response.status_code == 403:
                    await message.reply("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á OpenAI API ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
                    logger.error(f'HTTPStatusError: {e}')
                else:
                    await message.reply("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OpenAI API")
                    logger.error(f'Unexpected HTTPStatusError: {e}')
            except Exception as e:
                await message.reply("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                logger.error(f'Unexpected error in on_message: {e}')
            
            if response:
                logger.debug(f'OpenAI Response: {response}')
                reply_content = response.choices[0].message.content.strip() if response.choices else ""
                
                if reply_content:
                    # ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏≠‡∏Å
                    truncated_reply = reply_content[:2000]
                    await message.reply(truncated_reply)
                    await chatcontext_append(message.guild.id, f'{message.author.display_name}: {text}')
                    await chatcontext_append(message.guild.id, f'bot: {truncated_reply}')
            else:
                await message.reply("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏°‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OpenAI API")
    except Exception as e:
        logger.error(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô on_message: {e}')
        
        error_messages = [
            "‡πÅ‡∏°‡πà‡∏á‡∏á‡∏á ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏°‡∏ß‡πà‡∏∞",
            "‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≠‡∏Å... ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤! üõ†Ô∏è",
            "‡πÄ‡∏Æ‡πâ‡∏¢ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß ‡πÜ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏≠‡πã‡∏≠‡πÄ‡∏â‡∏¢!",
            "‡πÉ‡∏Ñ‡∏£‡πÑ‡∏õ‡πÅ‡∏ï‡∏∞‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡∏ü‡∏£‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡πâ‡∏á‡πÄ‡∏•‡∏¢‡πÄ‡∏ô‡∏µ‡πà‡∏¢! ‚ö°",
            "‡∏≠‡πâ‡∏≤‡∏ß ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏° ‡∏ú‡∏°‡πÅ‡∏Ñ‡πà‡∏ö‡∏≠‡∏ó! ü§ñ",
            "‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏õ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤!",
            "‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏û‡∏±‡∏á ‡πÅ‡∏ï‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà ‡πÜ ‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö!",
            "‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô ‡πÜ ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏≤‡πÅ‡∏õ‡πä‡∏ö!",
            "‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏Å‡πÉ‡∏à ‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°‡πÅ‡∏Ñ‡πà‡πÅ‡∏Æ‡∏á‡∏Ñ‡πå ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤!",
            "‡∏ô‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡πä‡∏≠‡∏á‡πÄ‡∏ô‡∏µ‡πà‡∏¢!"
        ]

        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î
        await message.channel.send(random.choice(error_messages))

bot.run(TOKEN)
